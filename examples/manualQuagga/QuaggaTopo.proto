syntax= "proto2";


// Specifies the type of host. Currently there are only two types, a quagga host
// and a lookup service host.
enum HostType
{
  HT_UNKNOWN = 0;
  HT_QUAGGA = 1;
  HT_LOOKUPSERVICE = 2;
  HT_UPDATE_REGENERATOR = 3;
}

// Defines the information needed to start a host up in mininet and the
// information needed to generated quagga bgpd configs. lo_ip and as_num are
// used by HT_QUAGGA host types.
message Host
{
  optional HostType host_type = 1;
  optional string host_name = 2;
  optional string ip = 3;
  optional string lo_ip = 4; 
  optional uint32 as_num = 5;
  // Path to custom init.d. Will be invoked if there is a specific quagga that
  // we want to run.
  optional string path_to_initd = 6; 
  // path to executable for redis (can also be a command to start redis)
  optional string path_to_redis_executable = 7; 
  optional uint32 island_id = 8;
  // hold the private /24 ip to announce pathlets from.
  optional string private_pathlet_ip = 9;
  optional string protocol = 10;
  optional uint32 is_border_router = 11; // 1 if border router, 0 if not
  optional MnFilter manual_two_hop = 12;// add manual two hop pathlet here.
  // options for when 'protocol' is "benchmark"
  optional BenchmarkProtocolOptions benchmark_protocol_options = 13; 
  optional UpdateRegeneratorOptions update_regenerator_options = 14;
}

// options for the HT_UPDATE_REGENERATOR host type
message UpdateRegeneratorOptions {
  // should contain a quagga destination ip, a mrt slice file, and a asip file.
  // Full paths for all
  optional string command = 1; // command to run the update regenerator service.
}

// Defines the properties of a link. This is used in Adjacency list entry to
// describe the link from a primary node to its neighbors
message Link{
  optional string adjacent_node_name = 1;
  optional uint32 link_cost = 2;
}

// Defines an adjacency list entry in a topology. This is used exclusively in
// the generation of quagga configs (i.e. what neighbors each quagga router
// has).
message AdjacencyListEntry{
  optional string primary_node_name = 1;
repeated Link links = 2;
  // repeated string adjacent_node_names = 2;
}

// Specifies an adjacency list of a bgp topology (does not specify the physical
// topology currently)
message Topology
{
  repeated AdjacencyListEntry adjacency_list_entries = 1;
}

message MnFilter{
  optional string one_hop_ip = 1;
  optional MnManualPathlet pathlet_to_advertise = 2;
}

message MnManualPathlet{
  optional uint32 vnode1 = 1;
  optional uint32 vnode2 = 2;
  optional string destination = 3;
}

// contains options for the benchmark protocol
message BenchmarkProtocolOptions {
  // the number of bytes to write to the advertisement
  optional uint32 num_bytes_to_write = 1;
}